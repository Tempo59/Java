一、默写：
  设计一个程序，键盘输入一个数值，计算出以这个值为直径的圆的周长和面积，并将结果在控制台输出

import java.util.*;
class Test {
	//程序的入口
	public static void main(String[]args){
		Scanner input = new Scanner(System.in);
		double d = input.nextDouble();
		double c = d * 3.14;
		double s = d / 2 * d / 2 * 3.14;
		System.out.println(s +""+ c);
	}
}


二、回顾：
  1.变量、常量
	变量：值可以改变的数据,只能存储一个数据，再次赋值新值覆盖旧值
	int a = 2;
	System.out.println(2);

	常量：值不可以改变的数据，常量需要使用final关键字修饰
	final int a = 2;

	变量分类：
	局部变量：
	全局变量：

  2.数据类型：
	基本数据类型和引用数据类型

	引用类型：数组、类、接口、枚举
	基本类型：byte short int long float double char boolean

	类型转换：
	自动转换：从低优先级向高优先级转
	强制转换：从高优先级向低优先级转

  3.运算符：
	算术、逻辑、关系、位、赋值、三目、字符串连接符

	算术运算符：+、-、*、/、%、++、--
		a++
		++a

	byte a = 3;
	a++;
	++a;
	--a;
	a--;

	a = (byte)(a + 1);//a = 3 + 1;

	逻辑运算符：&&、||、!
	操作数是布尔类型，结果是布尔类型
	!有一个操作数，&&、||有两个操作数

	&&和||运算时遵循短路法

	关系运算符：比较两个数据大小关系
	>,<,>=,<=,!=,==

	赋值运算符：
	=、+=、-=、*=、/=、%=

	三目运算符：
	表达式?值1:值2;

	位运算符：
	&、|、~、^、>>、>>>、<<

  4、优先级和转义字符：
	转义字符：\
	\n
	\t

	\\
	\"
	\'


三、流程控制：
  1.java中的流程控制语句：
	顺序结构、分支结构、循环结构

  2.顺序结构：
	执行时，按照代码的书写顺序执行

	分支结构：根据特定的条件选择执行某一段代码
		分支结构中，不是所有代码都会被执行

	循环结构：根据特定的条件重复执行某一个代码
	循环结构中，也不是所有代码都会被执行

四、分支结构：
	根据特定的条件选择执行某一段代码
	分支结构中，不是所有代码都会被执行

  1.简单if语句：
	语法：
	if(表达式){//功能代码}

	语法说明：
	表达式：结果类型必须是布尔类型
	执行顺序：首先判断表达式结果，当表达式结果为true时，执行		功能代码

  2.if..else..语句：
	语法：
	if(表达式){//功能代码1}else{//功能代码2}

	语法说明：
	表达式结果是布尔类型
	执行顺序：
	先判断表达式结果，当结果为true执行功能代码1，否则执行功				能代码2

  3.多重if..else..
	1）嵌套式：
	语法：
	if(表达式1){
		//功能代码1
		if(表达式2){
			//功能代码2
			......
		}else{
			//功能代码3
			......
		}
	}else{
		//功能代码4
		if(表达式3){
			//功能代码5
			......
		}else{
			//功能代码6
			......
		}
	}

	2）简洁式：if...else if..语句
	语法：
	if(表达式1){
		//功能代码1
	}else if(表达式2){
		//功能代码2
	}else if(表达式3){
		//功能代码3
	}......
	else{
		//功能代码n
	}

  4.switch...case...default...语句：
	语法：
	switch(表达式){
		case 常量标号1:
			//功能代码1
		case 常量标号2:
			//功能代码2
		......
		default :
			//功能代码n
	}

	语法说明：
	表达式：非long整形，字符型，字符串，枚举类型
	执行顺序：
	先计算表达式的结果，将结果与每一个case后的常量标号进行对比，跟哪一个常量标号一致，就执行哪一个case后的功能代码，若与所有的常量标号都不一样，执行default后的功能代码

	case语句的穿透性，如何避免case语句穿透，使用break关键字打破case语句的穿透性

	当每一个case和default语句后都有break时，case语句的顺序不会影响执行结果

	break关键字可以打破case语句的穿透性，但是break不是switch..case..default..语句的必要成分

	default语句可以省略：每一个case常量标号都不匹配，那么不		做任何操作


五、循环结构：
	根据特定的条件重复执行某一段代码

	案例：在控制台输出一个“hello world”
  使用循环完成重复代码操作，给循环一个条件，决定循环何时停止

  1.最基础的循环：for循环
	语法：
	for(表达式1;表达式2;表达式3){
		//循环体
	}

	语法说明：
	表达式1：循环的初始条件，表示循环从何时开始
	表达式2：循环的结束条件，结果是布尔类型，表示循环何时结束
	表达式3：使初始条件趋近于结束条件的表达式
	循环体：被重复执行的代码

	执行顺序：首先执行表达式1初始化循环的开始条件，判断表达式2，当表达式2的结果为true时，执行循环体，执行表达式3，否则循环结束；第二次直接判断表达式2

	for(表达式1;表达式2;表达式3){//循环体}

	表达式1可以省略，但是分号不能省，必须在for循环之前定义一个循环的初始条件
	for(;表达式2;表达式3){//循环体}

	表达式3可以省略，但是分号不能省，必须在循环体的最后一条语句加上表达式3

	for(表达式1;表达式2;){
		//循环体
		表达式3;
	}

	表达式2可以省略，分号不能省，此时循环变成死循环
	for(表达式1;;表达式3){
		//循环体
	}

	一般情况下，不省略表达式2，若省略了表达2可以在循环体中添加判断条件，使循环结束

	表达式1表达式3可以同时省略
	for(;表达式2;){//循环体}

  2.while循环
	语法：
	while(表达式){
		//循环体
	}

	说明：
	表达式结果是布尔类型
	执行顺序：
	先判断表达式结果，若为true执行循环体，否则不执行

  3.for循环和while循环的使用环境
	当明确循环次数时，首选for循环

	for(int i=100; i<=110; i++){}

	当不明确循环次数时，首选while循环
	int i = 1;
	while(i<=10){
		i+=2;	
		System.out.println(i);
	}

  4.do..while循环
	语法：
	do{
	  //循环体
	}while(表达式);

	语法说明：
	执行顺序：第一次执行循环体，第一次判断表达式，若为true，第二次执行循环体，否则不执行

  5.while循环和do..while循环的区别：
	while循环的循环体可能执行，也可能不执行
	do..while循环的循环体至少会被执行一次


  6.增强for循环：
	作用：遍历数组或集合使用
	for(数据类型 中间变量:数组名(集合名)){//循环体}

  7.嵌套循环：
	案例：打印一个5行7列的矩形，使用*打印
	*******
	*******
	*******
	*******
	*******

	练习：
	打印一个5行5列的直角三角形
	*
	**
	***
	****
	*****

	打印九九乘法表

六、流程控制中涉及到的关键字：
  1.break关键字
	1）打破case语句的穿透性，在switch..case..default..语句中使用
	2）表示跳出break关键字所在的循环
		int a = 1;
	for(int i=1; i<=10; i++){
		while(true){
			if(a==5){
				break;
			}
			System.out.println(a);
			a++;
		}
	}

  2.continue关键字：
	只能在循环中使用，表示结束所在的本次循环，开始下一次循环












