一、默写：
  1.设计一个矩形类（Rectangle），有长，宽属性，计算周长功能，计算面积的功能

  2.设计一个四棱住类（Column），有底面矩形、高属性，计算表面积，计算体积

二、回顾：
  1.面向对象设计思想

  2.面向对象和面向过程区别

  3.面向对象的核心：
	类和对象
	类是对象的模板（抽象）
	对象是类的实例

  4.类成员：
	成员数据：成员变量，数据成员，属性
	成员方法：行为功能
	构造方法：特殊的成员方法
		方法名和类名一致，没有返回值

	构造方法使用new调用，创建对象，构造方法中一般是对属性的初始化


三、面向对象的四大特征：
	抽象，封装，继承，多态

  1.什么是封装：
	对于类内部的成员不想随意的被外部进行访问，在类内部私有化，同时需要对外部提供一个共有的方法，用来访问内部私有的成员

  2.如何实现成员私有化：
	private关键字：访问权限
	使用private关键字修饰的类成员，只能在本类中进行访问，在类外无法访问

  3.访问类内部私有化的成员：
	1）获取私有属性的值：
	getXx()方法

	语法：
	public 返回值类型 getXx(){
		return 属性;
	}

	说明：
	返回值类型：要访问的属性的类型
	返回值：直接将属性值返回即可

	2）修改私有属性的值：
	setXx()
	
	语法：
	public void setXx(数据类型 变量名){
		属性名 = 变量名;
	}

	说明：
	数据类型：要修改的属性的类型
	变量名：一个合法的标识符即可
	方法体：给属性重新赋值


	案例：设计一个Animal类，有私有属性姓名，年龄
		提供共有的获取私有属性的方法

  4.this关键字：
	1）this.属性：表示访问当前对象的属性（访问本类的属性）
		当一个方法中的局部变量与全局变量同名时，若想在方法体中访问全局变量，需要使用this.属性

	2）this.方法：表示访问本类中的方法（当前对象的方法）

	3）this()：表示调用本类的构造方法，
		注意：所有的带参数构造方法默认第一条语句是调用本类的无参数构造方法，this()必须在构造方法的第一条语句，可以手动调用其他的构造方法

  5.static关键字：
	static关键字只能修饰类成员
	所有使用static关键字修饰的类成员，都表示静态成员，所有的对象都是相同，static修饰的类成员先于对象，不依赖任何的对象

	static修饰的成员变量：可以不创建对象直接通过类名访问，是所有对象		共享的数据
	static修饰的成员方法：可以不创建对象直接通过类名调用

	代码块：构造代码块（动态代码块）
	static修饰的代码块：静态代码块，在类加载时自动执行，并只执行这一次
	动态代码块：创建对象时自动执行，每创建一个对象就执行一次


static关键字的应用：
	工具类：Arrays
	工具类中的所有方法都是static的，不需要创建对象可以直接通过类名调用
	工具类中的所有的属性都是静态常量

	静态常量：注意必须声明的同时初始化

	不同包中的类不可以相互访问，若想访问需要导入
	使用import 包名.类名;
	自动导包的快捷键：ctrl+shift+o
	自动代码格式化：ctrl+shift+f

四、单例模式：
  1.单例模式的需求：
	在一个系统或平台中，某一个类的实例只需要有一个，单个实例
	对封装的应用

	将构造方法私有化，保证在类外不能随意的创建对象

	可以在类内创建对象，提供共有的方法获取这个类的对象

  2.饿汉式：
核心代码：
	public class Singleton{
		//属性
		private String name;
		private int age;
		//get/set 方法

		//私有化构造方法
		private Singleton(String name,int age){
			this.name = name;
			this.age = age;
		}

		//定义一个静态私有本类对象作为属性
		private static Singleton s = new Singleton("Tom", 12);

		//共有的获取本类对象的静态方法
		public static Singleton getS(){
			return s;
		}
	}

  3.懒汉式：
public class King{
	private String name;

	//私有构造方法
	private King (String name){
		this.name = name;
	}
	//静态本类私有对象作为属性
	private static King king;
	//共有静态方法获取本类对象
	public static King getKing(){
		return king;
	}
}

















