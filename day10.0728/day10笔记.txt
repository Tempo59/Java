一默写：
  设计一个抽象商品类，具有名称和产地属性
	非抽象食品类，继承商品类
	非抽象日用品类，继承商品类

	设计一个工具类，判断一件商品是食品还是日用品，若是食品输出“可以食用”，若是日用品输出“不可以食用”
public abstract class Goods {
	protected String name;
	protected String place;
	public Goods(){}
	public Goods(String name, String place){
		this.name = name;
		this.place = place;
	}
	//get/set
}

public class Food extends Goods{
	//构造方法
}
public class RiYongPing{
	//构造方法
}

public class Tools{
	public static void check(Goods g){
		if(g instanceof Food){
			System.out.println("可以食用");
		}else{
			System.out.println("不可以食用");
		}
	}
}

二、回顾：
  1.多态：
	对象多种形态，方法的多样性
	父类引用指向子类的实例
	接口的引用指向实现类的实例

	方法的重写（Override）和方法的重载（Overload）

  2.对象转型：
	自动转：从低级向高级转，从子类向父类转
	强制转：从高级向低级转，将父类的对象引用赋值给子类的引用

	Animal a = new Dog();
	Dog d = (Dog)a;

  3.instanceof关键字：
	obj instanceof A

	obj表示对象，A表示类
	判断obj是否是A类或A子类的对象

	若不能转，会抛出ClassCastException（类型转换异常）

  4.abstract：
	可以修饰方法：抽象方法，只声明用分号表示声明结束，没有方法体
		抽象方法所在的类必须是抽象类

	可以修饰类：抽象类，就是为了被继承
		可以有抽象方法，也可以没有
		抽象类中有构造方法但不能创建对象


三、接口：
  生活中的接口：usb接口，插座
	USB接口：宽度厚度，磁盘个位置
	插座：插头的个数，满足电压

  1.java中的接口：
	类的模板，对想使用这个接口的事物进行规范，这些事物必须遵守这些规范，否则不能使用

	接口是特殊的抽象类：接口中的方法全部都是抽象的，所有的属性都是静态常量

  2.如何声明一个接口：
	interface关键字

	和class平级关系

	语法：
	public interface 接口名 {
		//接口中的方法
		//接口中的静态常量
	}

  3.接口的分类：
	1）普通接口：在接口中声明一组抽象方法，和一组静态常量
	2）常量群接口：在接口中声明一组静态常量
	3）标志性接口：在接口中不声明任何成员，标记某些类具有特定的功能

  4.接口的特点：
	1）接口中的属性都是共有静态常量：
	public static final所有的属性都是用这三个关键字修饰
		若不写这三个，默认也是

	2）接口中所有的方法都是共有抽象的：
	public abstract关键字修饰
		若不写这两个修饰符，默认也是

	3）接口中没有构造方法，不能创建对象

  5.接口与接口的关系：
	接口和接口的关系只能是继承：使用关键字extends实现接口之间的继承

	public interface A{//抽象方法}
	
	//声明B接口继承A接口
	public interface B extends A{
		//声明的独有的抽象方法
		//从A中继承来的抽象方法
	}

  6.继承特点：
	类单继承：
	思考：现有类A和类B，类A中有fun方法，类B中有fun方法
	假设类C继承了A、B，使用C类对象调用fun方法时

	接口支持多继承：
	思考：现有接口A和接口B，接口A中有fun方法，B中有fun方法
	假设C接口继承了A、B，由于接口中的方法没有方法体，没有具体实现过程，所以只要接口C中存在fun方法即可，fun既可以说从A中继承的，也可以说从B中继承的

	public interface 子接口 extends 父接口1,父接口2....{}

  7.接口和类的关系：
	类实现接口：一个非抽象的类实现了一个接口时，必须在类体中实现所有的抽象方法（只要添加方法体就是实现）

	类如何实现接口：implements关键字，使用这个关键字完成类实现接口

	public interface A{
		public abstract void fun();
	}

	public class B implements A{
		//在此类中必须实现A接口中的所有的抽象方法
		public void fun(){}//空实现
	}

	实现接口的类是接口的实现类
	类B是接口A 的实现类

	当一个类有父类也有实现的接口时，实现格式如下：
	必须先继承在实现接口
	public class A extends 父类 implements 接口1,接口2,...{}


	思考：一个抽象类是否可以有非抽象父类？
		理论上可以，一般不提倡


	案例：一个交通工具类族Transport
	子类：飞机，车，船
	飞机子类：客机，战斗机
	船子类：客船，货船，航母
	车子类：客车，货车，坦克

	战斗机，航母，坦克都具有开火攻击的功能

	可以将开火攻击的方法设置在一个接口中

  8.思考：现有一个接口A，接口中有10个抽象方法，若在一个接口的实现类中只需要某个或某几个方法时，如何实现？

	适配器思想：可以设定一个类B，在类B中声明10个非抽象方法（10个方法		的方法名刚好和接口中的方法重名），空实现
		接口A的实现类C，继承B，实现接口A

  9.接口中特殊的方法：
	1）static关键字修饰的方法：
	接口中可以声明使用static关键字修饰的方法，而且需要加方法体

	2）jdk1.8之后新增的功能：
	使用default关键字修饰的方法可以加方法体

















