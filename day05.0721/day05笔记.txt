一、默写：
  1.基本数据类型有哪些

  2.动态初始化一个数组，键盘输入给每个元素重新赋值

  3.默写冒泡法排序（for循环开始）

二、回顾：
  1.数组：
	一个存储相同数据类型的数据的容器
  
  2.数组的声明与初始化：
	声明：数据类型是元素类型[]
	初始化：静态初始化，动态初始化

	静态：int[] arr = {};
		int[] arr = new int[]{};

	动态：int[] arr = new int[整形数据]

  3.数组的使用：
	1）下标访问：第一个元素的下表是0，最后一个是长度减一
		ArrayIndexOutOfBoundsException
	2）数组的长度：length属性
	3）修改元素的值：
		i.修改单个元素，通过下表找到某个元素，重新赋值
		ii.修改所有的元素，循环
	4）遍历：
		i.普通循环
			for(int i=0; i<arr.length; i++){}
		ii.增强for循环：
			for(数据类型 中间变量:数组名){}

  4.数组元素的查找：
	1）顺序查找：
		拿数组中每一个元素和要查找的元素进行匹配
		for和if
	2）二分法查找：
		有序
		不断的缩小查找范围

  5.数组元素的排序：
	1）选择排序：
		
	2）冒泡法：
		两两比较

  6.多维数组：二维数组
	元素类型[][]
	
	二维数组的遍历：需要使用嵌套循环

  7.Arrays工具类：

三、方法（函数）：
  1.什么是方法：主方法（程序的入口）
	被命名的，可以实现某个功能的程序段

  2.方法的声明：
	public static void main(String[]args){
		//功能代码
	}

	访问权限 其他修饰 返回值类型 方法名(参数列表){//方法体}

	说明：
	访问权限：表示方法在何地可以访问，public
	其他修饰符：static，静态的
	返回值：执行完方法的反馈
	方法名：名称，合法的标识符即可
	参数列表：声明方法时参数列表中的参数叫做形式参数
		形式参数：没有具体的数值，相当于只声明，不初始化
		在调用方法时，参数列表中的参数叫做实际参数
		实际参数：需要有具体的数值
	方法体：功能代码

补充：除了方法体之外，其他所有的成分和在一起称为方法的签名

	注意：方法和方法是相互独立的

四、方法的返回值和参数：

	return关键字：将方法的返回值带出方法

  1.返回值：
	例：接水，不需要反馈
		

	如果执行完方法需要有反馈，那么方法需要设计返回值，否则不
需要

	返回值类型：反馈的数据类型
		注意：当方法没有返回值时，返回值类型使用void

	public static void add(int a, int b){
		int c = a + b;
		System.out.println(c);
	}

  2.方法的参数：
	形式参数（形参）、实际参数（实参）
	形式参数实在方法声明时，参数列表中的参数
	形式参数只需要定义类型，给定标识符即可

	形式参数就是在方法完成功能过程中需要使用到但未知的数据

	注意：return可以将方法中的局部变量带出方法，没有返回值的方法中可以存在return语句，但是return后不能跟任何数据，表示方法执到此处结结束

五、方法的调用：
	方法调用时语法：
	数据类型 变量名 = 方法名(实参列表);

	System.out.println(方法名(实参列表));


	练习：设计一个方法，从一个整形数组中找出指定的元素

	调用方法传参数时，当参数是数组时，不可以直接传入大括号

	调用方法时，传参相当于赋值

	注意：当一个有返回值的方法中有分支语句，必须保证每一条分支都有返回值

	


	注意：一个方法只能有一个返回值，一个return语句只能将一个数据带出方法


六、方法的压栈：

练习：设计一个方法，交换两个变量的值

肯定完成不了功能，因为方法中的变量是局部变量，会随着方法的出栈一起消失
	
	不借助第三变量交换两个变量的值
	int a = 2;
	int b = 3;
	int temp = a;
	a = b;
	b = temp;

	a = a + b;//5
	b = a - b;//2
	a = a - b;//3

	当a，b都不为0时
	a = a * b;
	b = a / b;
	a = a / b;

	a = a ^ b;
	b = a ^ b;
	a = a ^ b;

七、方法的重载：
  1.定义：在一个类中，方法名相同，参数的个数或参数的类型不同

  2.重载方法的调用：
	调用方法时，使用方法名();
	执行时，虚拟机会找到最匹配的方法进行执行

  3.static关键字：
	使用static修饰的方法是静态方法，不使用static修饰的是非静态方法

	静态方法的访问情况：
	在静态方法中，只能访问静态的变量和静态的方法

	非静态方法：
	在非静态方法中，可以访问非静态的变量和方法，也可以访问静态的变量和方法

八、可变参数：不定长参数
  1.语法：
	在方法的参数列表中：
	int...a
	public static void fun(int...a){
		//功能代码
	}

  说明：使用方法：
	声明方法时，若在参数列表中定义以上形式的参数，在方法体中，将a作为一个数组使用
	调用方法时，传入的int类型数据个数没有限制

  2.要求：
	可变参数只能作为参数列表中的最后一个参数
	一个方法的参数列表中，只能有一个可变参数

九、方法的递归调用：
  1.什么递归：
	调用本身，在一个方法中调用自己，相当于循环
	使用递归调用时必须设定停止递归的条件

  2.递归的方式：
	1）直接递归：
	在fun方法中调用本身fun方法

	2）间接递归：
	在fun1方法中调用fun2方法，在fun2方法中调用fun1方法

	一般情况下不使用递归的方法，全部采用循环

	使用递归调用的方法，求一个数的阶乘
	例：5的阶乘等于5*4*3*2*1
















